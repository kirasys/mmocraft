// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace config {
PROTOBUF_CONSTEXPR Configuration::Configuration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_motd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.world_save_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_driver_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_server_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_port_)*/0
  , /*decltype(_impl_.server_max_player_)*/0u
  , /*decltype(_impl_.world_width_)*/0
  , /*decltype(_impl_.world_height_)*/0
  , /*decltype(_impl_.world_length_)*/0
  , /*decltype(_impl_.system_page_size_)*/0u
  , /*decltype(_impl_.system_alllocation_granularity_)*/0u
  , /*decltype(_impl_.system_num_of_processors_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {
    Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigurationDefaultTypeInternal _Configuration_default_instance_;
}  // namespace config
static ::_pb::Metadata file_level_metadata_config_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_config_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const uint32_t TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.server_ip_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.server_max_player_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.server_name_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.server_motd_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.world_width_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.world_height_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.world_length_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.world_save_dir_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.database_driver_name_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.database_server_address_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.database_name_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.database_userid_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.database_password_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.log_file_path_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.system_page_size_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.system_alllocation_granularity_),
  PROTOBUF_FIELD_OFFSET(::config::Configuration, _impl_.system_num_of_processors_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::config::Configuration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::config::_Configuration_default_instance_._instance,
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\006config\"\343\003\n\rConfiguration"
  "\022\021\n\tserver_ip\030\001 \001(\t\022\023\n\013server_port\030\002 \001(\005"
  "\022\031\n\021server_max_player\030\003 \001(\r\022\023\n\013server_na"
  "me\030\004 \001(\t\022\023\n\013server_motd\030\005 \001(\t\022\023\n\013world_w"
  "idth\030j \001(\005\022\024\n\014world_height\030k \001(\005\022\024\n\014worl"
  "d_length\030l \001(\005\022\026\n\016world_save_dir\030m \001(\t\022\035"
  "\n\024database_driver_name\030\311\001 \001(\t\022 \n\027databas"
  "e_server_address\030\312\001 \001(\t\022\026\n\rdatabase_name"
  "\030\313\001 \001(\t\022\030\n\017database_userid\030\314\001 \001(\t\022\032\n\021dat"
  "abase_password\030\315\001 \001(\t\022\026\n\rlog_file_path\030\255"
  "\002 \001(\t\022\031\n\020system_page_size\030\221\003 \001(\r\022\'\n\036syst"
  "em_alllocation_granularity\030\222\003 \001(\r\022!\n\030sys"
  "tem_num_of_processors\030\223\003 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_config_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_config_2eproto = {
    false, false, 516, descriptor_table_protodef_config_2eproto,
    "config.proto",
    &descriptor_table_config_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_config_2eproto::offsets,
    file_level_metadata_config_2eproto, file_level_enum_descriptors_config_2eproto,
    file_level_service_descriptors_config_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_config_2eproto_getter() {
  return &descriptor_table_config_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_config_2eproto(&descriptor_table_config_2eproto);
namespace config {

// ===================================================================

class Configuration::_Internal {
 public:
};

Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Configuration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_ip_){}
    , decltype(_impl_.server_name_){}
    , decltype(_impl_.server_motd_){}
    , decltype(_impl_.world_save_dir_){}
    , decltype(_impl_.database_driver_name_){}
    , decltype(_impl_.database_server_address_){}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.database_userid_){}
    , decltype(_impl_.database_password_){}
    , decltype(_impl_.log_file_path_){}
    , decltype(_impl_.server_port_){}
    , decltype(_impl_.server_max_player_){}
    , decltype(_impl_.world_width_){}
    , decltype(_impl_.world_height_){}
    , decltype(_impl_.world_length_){}
    , decltype(_impl_.system_page_size_){}
    , decltype(_impl_.system_alllocation_granularity_){}
    , decltype(_impl_.system_num_of_processors_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_ip().empty()) {
    _this->_impl_.server_ip_.Set(from._internal_server_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_name().empty()) {
    _this->_impl_.server_name_.Set(from._internal_server_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_motd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_motd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_motd().empty()) {
    _this->_impl_.server_motd_.Set(from._internal_server_motd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.world_save_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.world_save_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_world_save_dir().empty()) {
    _this->_impl_.world_save_dir_.Set(from._internal_world_save_dir(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_driver_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_driver_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_driver_name().empty()) {
    _this->_impl_.database_driver_name_.Set(from._internal_database_driver_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_server_address().empty()) {
    _this->_impl_.database_server_address_.Set(from._internal_database_server_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_name().empty()) {
    _this->_impl_.database_name_.Set(from._internal_database_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_userid().empty()) {
    _this->_impl_.database_userid_.Set(from._internal_database_userid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database_password().empty()) {
    _this->_impl_.database_password_.Set(from._internal_database_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log_file_path().empty()) {
    _this->_impl_.log_file_path_.Set(from._internal_log_file_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.server_port_, &from._impl_.server_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.system_num_of_processors_) -
    reinterpret_cast<char*>(&_impl_.server_port_)) + sizeof(_impl_.system_num_of_processors_));
  // @@protoc_insertion_point(copy_constructor:config.Configuration)
}

inline void Configuration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_ip_){}
    , decltype(_impl_.server_name_){}
    , decltype(_impl_.server_motd_){}
    , decltype(_impl_.world_save_dir_){}
    , decltype(_impl_.database_driver_name_){}
    , decltype(_impl_.database_server_address_){}
    , decltype(_impl_.database_name_){}
    , decltype(_impl_.database_userid_){}
    , decltype(_impl_.database_password_){}
    , decltype(_impl_.log_file_path_){}
    , decltype(_impl_.server_port_){0}
    , decltype(_impl_.server_max_player_){0u}
    , decltype(_impl_.world_width_){0}
    , decltype(_impl_.world_height_){0}
    , decltype(_impl_.world_length_){0}
    , decltype(_impl_.system_page_size_){0u}
    , decltype(_impl_.system_alllocation_granularity_){0u}
    , decltype(_impl_.system_num_of_processors_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_motd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_motd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.world_save_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.world_save_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_driver_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_driver_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:config.Configuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_ip_.Destroy();
  _impl_.server_name_.Destroy();
  _impl_.server_motd_.Destroy();
  _impl_.world_save_dir_.Destroy();
  _impl_.database_driver_name_.Destroy();
  _impl_.database_server_address_.Destroy();
  _impl_.database_name_.Destroy();
  _impl_.database_userid_.Destroy();
  _impl_.database_password_.Destroy();
  _impl_.log_file_path_.Destroy();
}

void Configuration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Configuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_ip_.ClearToEmpty();
  _impl_.server_name_.ClearToEmpty();
  _impl_.server_motd_.ClearToEmpty();
  _impl_.world_save_dir_.ClearToEmpty();
  _impl_.database_driver_name_.ClearToEmpty();
  _impl_.database_server_address_.ClearToEmpty();
  _impl_.database_name_.ClearToEmpty();
  _impl_.database_userid_.ClearToEmpty();
  _impl_.database_password_.ClearToEmpty();
  _impl_.log_file_path_.ClearToEmpty();
  ::memset(&_impl_.server_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.system_num_of_processors_) -
      reinterpret_cast<char*>(&_impl_.server_port_)) + sizeof(_impl_.system_num_of_processors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string server_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.server_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 server_max_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.server_max_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_server_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.server_name"));
        } else
          goto handle_unusual;
        continue;
      // string server_motd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_server_motd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.server_motd"));
        } else
          goto handle_unusual;
        continue;
      // int32 world_width = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.world_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 world_height = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.world_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 world_length = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.world_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string world_save_dir = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_world_save_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.world_save_dir"));
        } else
          goto handle_unusual;
        continue;
      // string database_driver_name = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_database_driver_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.database_driver_name"));
        } else
          goto handle_unusual;
        continue;
      // string database_server_address = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_database_server_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.database_server_address"));
        } else
          goto handle_unusual;
        continue;
      // string database_name = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_database_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.database_name"));
        } else
          goto handle_unusual;
        continue;
      // string database_userid = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_database_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.database_userid"));
        } else
          goto handle_unusual;
        continue;
      // string database_password = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_database_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.database_password"));
        } else
          goto handle_unusual;
        continue;
      // string log_file_path = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_log_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Configuration.log_file_path"));
        } else
          goto handle_unusual;
        continue;
      // uint32 system_page_size = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.system_page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 system_alllocation_granularity = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.system_alllocation_granularity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 system_num_of_processors = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.system_num_of_processors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Configuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_ip = 1;
  if (!this->_internal_server_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_ip().data(), static_cast<int>(this->_internal_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.server_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_ip(), target);
  }

  // int32 server_port = 2;
  if (this->_internal_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_port(), target);
  }

  // uint32 server_max_player = 3;
  if (this->_internal_server_max_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_max_player(), target);
  }

  // string server_name = 4;
  if (!this->_internal_server_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.server_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_server_name(), target);
  }

  // string server_motd = 5;
  if (!this->_internal_server_motd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_motd().data(), static_cast<int>(this->_internal_server_motd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.server_motd");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_server_motd(), target);
  }

  // int32 world_width = 106;
  if (this->_internal_world_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(106, this->_internal_world_width(), target);
  }

  // int32 world_height = 107;
  if (this->_internal_world_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(107, this->_internal_world_height(), target);
  }

  // int32 world_length = 108;
  if (this->_internal_world_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(108, this->_internal_world_length(), target);
  }

  // string world_save_dir = 109;
  if (!this->_internal_world_save_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_world_save_dir().data(), static_cast<int>(this->_internal_world_save_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.world_save_dir");
    target = stream->WriteStringMaybeAliased(
        109, this->_internal_world_save_dir(), target);
  }

  // string database_driver_name = 201;
  if (!this->_internal_database_driver_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_driver_name().data(), static_cast<int>(this->_internal_database_driver_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.database_driver_name");
    target = stream->WriteStringMaybeAliased(
        201, this->_internal_database_driver_name(), target);
  }

  // string database_server_address = 202;
  if (!this->_internal_database_server_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_server_address().data(), static_cast<int>(this->_internal_database_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.database_server_address");
    target = stream->WriteStringMaybeAliased(
        202, this->_internal_database_server_address(), target);
  }

  // string database_name = 203;
  if (!this->_internal_database_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_name().data(), static_cast<int>(this->_internal_database_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.database_name");
    target = stream->WriteStringMaybeAliased(
        203, this->_internal_database_name(), target);
  }

  // string database_userid = 204;
  if (!this->_internal_database_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_userid().data(), static_cast<int>(this->_internal_database_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.database_userid");
    target = stream->WriteStringMaybeAliased(
        204, this->_internal_database_userid(), target);
  }

  // string database_password = 205;
  if (!this->_internal_database_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database_password().data(), static_cast<int>(this->_internal_database_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.database_password");
    target = stream->WriteStringMaybeAliased(
        205, this->_internal_database_password(), target);
  }

  // string log_file_path = 301;
  if (!this->_internal_log_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_file_path().data(), static_cast<int>(this->_internal_log_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Configuration.log_file_path");
    target = stream->WriteStringMaybeAliased(
        301, this->_internal_log_file_path(), target);
  }

  // uint32 system_page_size = 401;
  if (this->_internal_system_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(401, this->_internal_system_page_size(), target);
  }

  // uint32 system_alllocation_granularity = 402;
  if (this->_internal_system_alllocation_granularity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(402, this->_internal_system_alllocation_granularity(), target);
  }

  // uint32 system_num_of_processors = 403;
  if (this->_internal_system_num_of_processors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(403, this->_internal_system_num_of_processors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Configuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_ip = 1;
  if (!this->_internal_server_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_ip());
  }

  // string server_name = 4;
  if (!this->_internal_server_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_name());
  }

  // string server_motd = 5;
  if (!this->_internal_server_motd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_motd());
  }

  // string world_save_dir = 109;
  if (!this->_internal_world_save_dir().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_world_save_dir());
  }

  // string database_driver_name = 201;
  if (!this->_internal_database_driver_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_driver_name());
  }

  // string database_server_address = 202;
  if (!this->_internal_database_server_address().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_server_address());
  }

  // string database_name = 203;
  if (!this->_internal_database_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_name());
  }

  // string database_userid = 204;
  if (!this->_internal_database_userid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_userid());
  }

  // string database_password = 205;
  if (!this->_internal_database_password().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database_password());
  }

  // string log_file_path = 301;
  if (!this->_internal_log_file_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_file_path());
  }

  // int32 server_port = 2;
  if (this->_internal_server_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_port());
  }

  // uint32 server_max_player = 3;
  if (this->_internal_server_max_player() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_max_player());
  }

  // int32 world_width = 106;
  if (this->_internal_world_width() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_world_width());
  }

  // int32 world_height = 107;
  if (this->_internal_world_height() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_world_height());
  }

  // int32 world_length = 108;
  if (this->_internal_world_length() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_world_length());
  }

  // uint32 system_page_size = 401;
  if (this->_internal_system_page_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_system_page_size());
  }

  // uint32 system_alllocation_granularity = 402;
  if (this->_internal_system_alllocation_granularity() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_system_alllocation_granularity());
  }

  // uint32 system_num_of_processors = 403;
  if (this->_internal_system_num_of_processors() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_system_num_of_processors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configuration::GetClassData() const { return &_class_data_; }


void Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Configuration*>(&to_msg);
  auto& from = static_cast<const Configuration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Configuration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_ip().empty()) {
    _this->_internal_set_server_ip(from._internal_server_ip());
  }
  if (!from._internal_server_name().empty()) {
    _this->_internal_set_server_name(from._internal_server_name());
  }
  if (!from._internal_server_motd().empty()) {
    _this->_internal_set_server_motd(from._internal_server_motd());
  }
  if (!from._internal_world_save_dir().empty()) {
    _this->_internal_set_world_save_dir(from._internal_world_save_dir());
  }
  if (!from._internal_database_driver_name().empty()) {
    _this->_internal_set_database_driver_name(from._internal_database_driver_name());
  }
  if (!from._internal_database_server_address().empty()) {
    _this->_internal_set_database_server_address(from._internal_database_server_address());
  }
  if (!from._internal_database_name().empty()) {
    _this->_internal_set_database_name(from._internal_database_name());
  }
  if (!from._internal_database_userid().empty()) {
    _this->_internal_set_database_userid(from._internal_database_userid());
  }
  if (!from._internal_database_password().empty()) {
    _this->_internal_set_database_password(from._internal_database_password());
  }
  if (!from._internal_log_file_path().empty()) {
    _this->_internal_set_log_file_path(from._internal_log_file_path());
  }
  if (from._internal_server_port() != 0) {
    _this->_internal_set_server_port(from._internal_server_port());
  }
  if (from._internal_server_max_player() != 0) {
    _this->_internal_set_server_max_player(from._internal_server_max_player());
  }
  if (from._internal_world_width() != 0) {
    _this->_internal_set_world_width(from._internal_world_width());
  }
  if (from._internal_world_height() != 0) {
    _this->_internal_set_world_height(from._internal_world_height());
  }
  if (from._internal_world_length() != 0) {
    _this->_internal_set_world_length(from._internal_world_length());
  }
  if (from._internal_system_page_size() != 0) {
    _this->_internal_set_system_page_size(from._internal_system_page_size());
  }
  if (from._internal_system_alllocation_granularity() != 0) {
    _this->_internal_set_system_alllocation_granularity(from._internal_system_alllocation_granularity());
  }
  if (from._internal_system_num_of_processors() != 0) {
    _this->_internal_set_system_num_of_processors(from._internal_system_num_of_processors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_ip_, lhs_arena,
      &other->_impl_.server_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_name_, lhs_arena,
      &other->_impl_.server_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_motd_, lhs_arena,
      &other->_impl_.server_motd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.world_save_dir_, lhs_arena,
      &other->_impl_.world_save_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_driver_name_, lhs_arena,
      &other->_impl_.database_driver_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_server_address_, lhs_arena,
      &other->_impl_.database_server_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_name_, lhs_arena,
      &other->_impl_.database_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_userid_, lhs_arena,
      &other->_impl_.database_userid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_password_, lhs_arena,
      &other->_impl_.database_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_file_path_, lhs_arena,
      &other->_impl_.log_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configuration, _impl_.system_num_of_processors_)
      + sizeof(Configuration::_impl_.system_num_of_processors_)
      - PROTOBUF_FIELD_OFFSET(Configuration, _impl_.server_port_)>(
          reinterpret_cast<char*>(&_impl_.server_port_),
          reinterpret_cast<char*>(&other->_impl_.server_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::config::Configuration*
Arena::CreateMaybeMessage< ::config::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Configuration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
