// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace config {
class Configuration;
struct ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> ::config::Configuration* Arena::CreateMaybeMessage<::config::Configuration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace config {

// ===================================================================

class Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  ~Configuration() override;
  explicit PROTOBUF_CONSTEXPR Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Configuration& from) {
    Configuration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 1,
    kServerNameFieldNumber = 4,
    kServerMotdFieldNumber = 5,
    kWorldSaveDirFieldNumber = 109,
    kDatabaseDriverNameFieldNumber = 201,
    kDatabaseServerAddressFieldNumber = 202,
    kDatabaseNameFieldNumber = 203,
    kDatabaseUseridFieldNumber = 204,
    kDatabasePasswordFieldNumber = 205,
    kLogFilePathFieldNumber = 301,
    kServerPortFieldNumber = 2,
    kServerMaxPlayerFieldNumber = 3,
    kWorldWidthFieldNumber = 106,
    kWorldHeightFieldNumber = 107,
    kWorldLengthFieldNumber = 108,
    kSystemPageSizeFieldNumber = 401,
    kSystemAlllocationGranularityFieldNumber = 402,
    kSystemNumOfProcessorsFieldNumber = 403,
  };
  // string server_ip = 1;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // string server_name = 4;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string server_motd = 5;
  void clear_server_motd();
  const std::string& server_motd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_motd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_motd();
  PROTOBUF_NODISCARD std::string* release_server_motd();
  void set_allocated_server_motd(std::string* server_motd);
  private:
  const std::string& _internal_server_motd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_motd(const std::string& value);
  std::string* _internal_mutable_server_motd();
  public:

  // string world_save_dir = 109;
  void clear_world_save_dir();
  const std::string& world_save_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world_save_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world_save_dir();
  PROTOBUF_NODISCARD std::string* release_world_save_dir();
  void set_allocated_world_save_dir(std::string* world_save_dir);
  private:
  const std::string& _internal_world_save_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_save_dir(const std::string& value);
  std::string* _internal_mutable_world_save_dir();
  public:

  // string database_driver_name = 201;
  void clear_database_driver_name();
  const std::string& database_driver_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_driver_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_driver_name();
  PROTOBUF_NODISCARD std::string* release_database_driver_name();
  void set_allocated_database_driver_name(std::string* database_driver_name);
  private:
  const std::string& _internal_database_driver_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_driver_name(const std::string& value);
  std::string* _internal_mutable_database_driver_name();
  public:

  // string database_server_address = 202;
  void clear_database_server_address();
  const std::string& database_server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_server_address();
  PROTOBUF_NODISCARD std::string* release_database_server_address();
  void set_allocated_database_server_address(std::string* database_server_address);
  private:
  const std::string& _internal_database_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_server_address(const std::string& value);
  std::string* _internal_mutable_database_server_address();
  public:

  // string database_name = 203;
  void clear_database_name();
  const std::string& database_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_name();
  PROTOBUF_NODISCARD std::string* release_database_name();
  void set_allocated_database_name(std::string* database_name);
  private:
  const std::string& _internal_database_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_name(const std::string& value);
  std::string* _internal_mutable_database_name();
  public:

  // string database_userid = 204;
  void clear_database_userid();
  const std::string& database_userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_userid();
  PROTOBUF_NODISCARD std::string* release_database_userid();
  void set_allocated_database_userid(std::string* database_userid);
  private:
  const std::string& _internal_database_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_userid(const std::string& value);
  std::string* _internal_mutable_database_userid();
  public:

  // string database_password = 205;
  void clear_database_password();
  const std::string& database_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_password();
  PROTOBUF_NODISCARD std::string* release_database_password();
  void set_allocated_database_password(std::string* database_password);
  private:
  const std::string& _internal_database_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_password(const std::string& value);
  std::string* _internal_mutable_database_password();
  public:

  // string log_file_path = 301;
  void clear_log_file_path();
  const std::string& log_file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_file_path();
  PROTOBUF_NODISCARD std::string* release_log_file_path();
  void set_allocated_log_file_path(std::string* log_file_path);
  private:
  const std::string& _internal_log_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_file_path(const std::string& value);
  std::string* _internal_mutable_log_file_path();
  public:

  // int32 server_port = 2;
  void clear_server_port();
  int32_t server_port() const;
  void set_server_port(int32_t value);
  private:
  int32_t _internal_server_port() const;
  void _internal_set_server_port(int32_t value);
  public:

  // uint32 server_max_player = 3;
  void clear_server_max_player();
  uint32_t server_max_player() const;
  void set_server_max_player(uint32_t value);
  private:
  uint32_t _internal_server_max_player() const;
  void _internal_set_server_max_player(uint32_t value);
  public:

  // int32 world_width = 106;
  void clear_world_width();
  int32_t world_width() const;
  void set_world_width(int32_t value);
  private:
  int32_t _internal_world_width() const;
  void _internal_set_world_width(int32_t value);
  public:

  // int32 world_height = 107;
  void clear_world_height();
  int32_t world_height() const;
  void set_world_height(int32_t value);
  private:
  int32_t _internal_world_height() const;
  void _internal_set_world_height(int32_t value);
  public:

  // int32 world_length = 108;
  void clear_world_length();
  int32_t world_length() const;
  void set_world_length(int32_t value);
  private:
  int32_t _internal_world_length() const;
  void _internal_set_world_length(int32_t value);
  public:

  // uint32 system_page_size = 401;
  void clear_system_page_size();
  uint32_t system_page_size() const;
  void set_system_page_size(uint32_t value);
  private:
  uint32_t _internal_system_page_size() const;
  void _internal_set_system_page_size(uint32_t value);
  public:

  // uint32 system_alllocation_granularity = 402;
  void clear_system_alllocation_granularity();
  uint32_t system_alllocation_granularity() const;
  void set_system_alllocation_granularity(uint32_t value);
  private:
  uint32_t _internal_system_alllocation_granularity() const;
  void _internal_set_system_alllocation_granularity(uint32_t value);
  public:

  // uint32 system_num_of_processors = 403;
  void clear_system_num_of_processors();
  uint32_t system_num_of_processors() const;
  void set_system_num_of_processors(uint32_t value);
  private:
  uint32_t _internal_system_num_of_processors() const;
  void _internal_set_system_num_of_processors(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:config.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_motd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_save_dir_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_driver_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_server_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_file_path_;
    int32_t server_port_;
    uint32_t server_max_player_;
    int32_t world_width_;
    int32_t world_height_;
    int32_t world_length_;
    uint32_t system_page_size_;
    uint32_t system_alllocation_granularity_;
    uint32_t system_num_of_processors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Configuration

// string server_ip = 1;
inline void Configuration::clear_server_ip() {
  _impl_.server_ip_.ClearToEmpty();
}
inline const std::string& Configuration::server_ip() const {
  // @@protoc_insertion_point(field_get:config.Configuration.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.server_ip)
}
inline std::string* Configuration::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:config.Configuration.server_ip)
  return _s;
}
inline const std::string& Configuration::_internal_server_ip() const {
  return _impl_.server_ip_.Get();
}
inline void Configuration::_internal_set_server_ip(const std::string& value) {
  
  _impl_.server_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_server_ip() {
  
  return _impl_.server_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_server_ip() {
  // @@protoc_insertion_point(field_release:config.Configuration.server_ip)
  return _impl_.server_ip_.Release();
}
inline void Configuration::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  _impl_.server_ip_.SetAllocated(server_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_ip_.IsDefault()) {
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.server_ip)
}

// int32 server_port = 2;
inline void Configuration::clear_server_port() {
  _impl_.server_port_ = 0;
}
inline int32_t Configuration::_internal_server_port() const {
  return _impl_.server_port_;
}
inline int32_t Configuration::server_port() const {
  // @@protoc_insertion_point(field_get:config.Configuration.server_port)
  return _internal_server_port();
}
inline void Configuration::_internal_set_server_port(int32_t value) {
  
  _impl_.server_port_ = value;
}
inline void Configuration::set_server_port(int32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:config.Configuration.server_port)
}

// uint32 server_max_player = 3;
inline void Configuration::clear_server_max_player() {
  _impl_.server_max_player_ = 0u;
}
inline uint32_t Configuration::_internal_server_max_player() const {
  return _impl_.server_max_player_;
}
inline uint32_t Configuration::server_max_player() const {
  // @@protoc_insertion_point(field_get:config.Configuration.server_max_player)
  return _internal_server_max_player();
}
inline void Configuration::_internal_set_server_max_player(uint32_t value) {
  
  _impl_.server_max_player_ = value;
}
inline void Configuration::set_server_max_player(uint32_t value) {
  _internal_set_server_max_player(value);
  // @@protoc_insertion_point(field_set:config.Configuration.server_max_player)
}

// string server_name = 4;
inline void Configuration::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& Configuration::server_name() const {
  // @@protoc_insertion_point(field_get:config.Configuration.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.server_name)
}
inline std::string* Configuration::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:config.Configuration.server_name)
  return _s;
}
inline const std::string& Configuration::_internal_server_name() const {
  return _impl_.server_name_.Get();
}
inline void Configuration::_internal_set_server_name(const std::string& value) {
  
  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_server_name() {
  
  return _impl_.server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_server_name() {
  // @@protoc_insertion_point(field_release:config.Configuration.server_name)
  return _impl_.server_name_.Release();
}
inline void Configuration::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  _impl_.server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_name_.IsDefault()) {
    _impl_.server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.server_name)
}

// string server_motd = 5;
inline void Configuration::clear_server_motd() {
  _impl_.server_motd_.ClearToEmpty();
}
inline const std::string& Configuration::server_motd() const {
  // @@protoc_insertion_point(field_get:config.Configuration.server_motd)
  return _internal_server_motd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_server_motd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_motd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.server_motd)
}
inline std::string* Configuration::mutable_server_motd() {
  std::string* _s = _internal_mutable_server_motd();
  // @@protoc_insertion_point(field_mutable:config.Configuration.server_motd)
  return _s;
}
inline const std::string& Configuration::_internal_server_motd() const {
  return _impl_.server_motd_.Get();
}
inline void Configuration::_internal_set_server_motd(const std::string& value) {
  
  _impl_.server_motd_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_server_motd() {
  
  return _impl_.server_motd_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_server_motd() {
  // @@protoc_insertion_point(field_release:config.Configuration.server_motd)
  return _impl_.server_motd_.Release();
}
inline void Configuration::set_allocated_server_motd(std::string* server_motd) {
  if (server_motd != nullptr) {
    
  } else {
    
  }
  _impl_.server_motd_.SetAllocated(server_motd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_motd_.IsDefault()) {
    _impl_.server_motd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.server_motd)
}

// int32 world_width = 106;
inline void Configuration::clear_world_width() {
  _impl_.world_width_ = 0;
}
inline int32_t Configuration::_internal_world_width() const {
  return _impl_.world_width_;
}
inline int32_t Configuration::world_width() const {
  // @@protoc_insertion_point(field_get:config.Configuration.world_width)
  return _internal_world_width();
}
inline void Configuration::_internal_set_world_width(int32_t value) {
  
  _impl_.world_width_ = value;
}
inline void Configuration::set_world_width(int32_t value) {
  _internal_set_world_width(value);
  // @@protoc_insertion_point(field_set:config.Configuration.world_width)
}

// int32 world_height = 107;
inline void Configuration::clear_world_height() {
  _impl_.world_height_ = 0;
}
inline int32_t Configuration::_internal_world_height() const {
  return _impl_.world_height_;
}
inline int32_t Configuration::world_height() const {
  // @@protoc_insertion_point(field_get:config.Configuration.world_height)
  return _internal_world_height();
}
inline void Configuration::_internal_set_world_height(int32_t value) {
  
  _impl_.world_height_ = value;
}
inline void Configuration::set_world_height(int32_t value) {
  _internal_set_world_height(value);
  // @@protoc_insertion_point(field_set:config.Configuration.world_height)
}

// int32 world_length = 108;
inline void Configuration::clear_world_length() {
  _impl_.world_length_ = 0;
}
inline int32_t Configuration::_internal_world_length() const {
  return _impl_.world_length_;
}
inline int32_t Configuration::world_length() const {
  // @@protoc_insertion_point(field_get:config.Configuration.world_length)
  return _internal_world_length();
}
inline void Configuration::_internal_set_world_length(int32_t value) {
  
  _impl_.world_length_ = value;
}
inline void Configuration::set_world_length(int32_t value) {
  _internal_set_world_length(value);
  // @@protoc_insertion_point(field_set:config.Configuration.world_length)
}

// string world_save_dir = 109;
inline void Configuration::clear_world_save_dir() {
  _impl_.world_save_dir_.ClearToEmpty();
}
inline const std::string& Configuration::world_save_dir() const {
  // @@protoc_insertion_point(field_get:config.Configuration.world_save_dir)
  return _internal_world_save_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_world_save_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.world_save_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.world_save_dir)
}
inline std::string* Configuration::mutable_world_save_dir() {
  std::string* _s = _internal_mutable_world_save_dir();
  // @@protoc_insertion_point(field_mutable:config.Configuration.world_save_dir)
  return _s;
}
inline const std::string& Configuration::_internal_world_save_dir() const {
  return _impl_.world_save_dir_.Get();
}
inline void Configuration::_internal_set_world_save_dir(const std::string& value) {
  
  _impl_.world_save_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_world_save_dir() {
  
  return _impl_.world_save_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_world_save_dir() {
  // @@protoc_insertion_point(field_release:config.Configuration.world_save_dir)
  return _impl_.world_save_dir_.Release();
}
inline void Configuration::set_allocated_world_save_dir(std::string* world_save_dir) {
  if (world_save_dir != nullptr) {
    
  } else {
    
  }
  _impl_.world_save_dir_.SetAllocated(world_save_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.world_save_dir_.IsDefault()) {
    _impl_.world_save_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.world_save_dir)
}

// string database_driver_name = 201;
inline void Configuration::clear_database_driver_name() {
  _impl_.database_driver_name_.ClearToEmpty();
}
inline const std::string& Configuration::database_driver_name() const {
  // @@protoc_insertion_point(field_get:config.Configuration.database_driver_name)
  return _internal_database_driver_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_database_driver_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_driver_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.database_driver_name)
}
inline std::string* Configuration::mutable_database_driver_name() {
  std::string* _s = _internal_mutable_database_driver_name();
  // @@protoc_insertion_point(field_mutable:config.Configuration.database_driver_name)
  return _s;
}
inline const std::string& Configuration::_internal_database_driver_name() const {
  return _impl_.database_driver_name_.Get();
}
inline void Configuration::_internal_set_database_driver_name(const std::string& value) {
  
  _impl_.database_driver_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_database_driver_name() {
  
  return _impl_.database_driver_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_database_driver_name() {
  // @@protoc_insertion_point(field_release:config.Configuration.database_driver_name)
  return _impl_.database_driver_name_.Release();
}
inline void Configuration::set_allocated_database_driver_name(std::string* database_driver_name) {
  if (database_driver_name != nullptr) {
    
  } else {
    
  }
  _impl_.database_driver_name_.SetAllocated(database_driver_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_driver_name_.IsDefault()) {
    _impl_.database_driver_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.database_driver_name)
}

// string database_server_address = 202;
inline void Configuration::clear_database_server_address() {
  _impl_.database_server_address_.ClearToEmpty();
}
inline const std::string& Configuration::database_server_address() const {
  // @@protoc_insertion_point(field_get:config.Configuration.database_server_address)
  return _internal_database_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_database_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.database_server_address)
}
inline std::string* Configuration::mutable_database_server_address() {
  std::string* _s = _internal_mutable_database_server_address();
  // @@protoc_insertion_point(field_mutable:config.Configuration.database_server_address)
  return _s;
}
inline const std::string& Configuration::_internal_database_server_address() const {
  return _impl_.database_server_address_.Get();
}
inline void Configuration::_internal_set_database_server_address(const std::string& value) {
  
  _impl_.database_server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_database_server_address() {
  
  return _impl_.database_server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_database_server_address() {
  // @@protoc_insertion_point(field_release:config.Configuration.database_server_address)
  return _impl_.database_server_address_.Release();
}
inline void Configuration::set_allocated_database_server_address(std::string* database_server_address) {
  if (database_server_address != nullptr) {
    
  } else {
    
  }
  _impl_.database_server_address_.SetAllocated(database_server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_server_address_.IsDefault()) {
    _impl_.database_server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.database_server_address)
}

// string database_name = 203;
inline void Configuration::clear_database_name() {
  _impl_.database_name_.ClearToEmpty();
}
inline const std::string& Configuration::database_name() const {
  // @@protoc_insertion_point(field_get:config.Configuration.database_name)
  return _internal_database_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_database_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.database_name)
}
inline std::string* Configuration::mutable_database_name() {
  std::string* _s = _internal_mutable_database_name();
  // @@protoc_insertion_point(field_mutable:config.Configuration.database_name)
  return _s;
}
inline const std::string& Configuration::_internal_database_name() const {
  return _impl_.database_name_.Get();
}
inline void Configuration::_internal_set_database_name(const std::string& value) {
  
  _impl_.database_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_database_name() {
  
  return _impl_.database_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_database_name() {
  // @@protoc_insertion_point(field_release:config.Configuration.database_name)
  return _impl_.database_name_.Release();
}
inline void Configuration::set_allocated_database_name(std::string* database_name) {
  if (database_name != nullptr) {
    
  } else {
    
  }
  _impl_.database_name_.SetAllocated(database_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_name_.IsDefault()) {
    _impl_.database_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.database_name)
}

// string database_userid = 204;
inline void Configuration::clear_database_userid() {
  _impl_.database_userid_.ClearToEmpty();
}
inline const std::string& Configuration::database_userid() const {
  // @@protoc_insertion_point(field_get:config.Configuration.database_userid)
  return _internal_database_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_database_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.database_userid)
}
inline std::string* Configuration::mutable_database_userid() {
  std::string* _s = _internal_mutable_database_userid();
  // @@protoc_insertion_point(field_mutable:config.Configuration.database_userid)
  return _s;
}
inline const std::string& Configuration::_internal_database_userid() const {
  return _impl_.database_userid_.Get();
}
inline void Configuration::_internal_set_database_userid(const std::string& value) {
  
  _impl_.database_userid_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_database_userid() {
  
  return _impl_.database_userid_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_database_userid() {
  // @@protoc_insertion_point(field_release:config.Configuration.database_userid)
  return _impl_.database_userid_.Release();
}
inline void Configuration::set_allocated_database_userid(std::string* database_userid) {
  if (database_userid != nullptr) {
    
  } else {
    
  }
  _impl_.database_userid_.SetAllocated(database_userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_userid_.IsDefault()) {
    _impl_.database_userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.database_userid)
}

// string database_password = 205;
inline void Configuration::clear_database_password() {
  _impl_.database_password_.ClearToEmpty();
}
inline const std::string& Configuration::database_password() const {
  // @@protoc_insertion_point(field_get:config.Configuration.database_password)
  return _internal_database_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_database_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.database_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.database_password)
}
inline std::string* Configuration::mutable_database_password() {
  std::string* _s = _internal_mutable_database_password();
  // @@protoc_insertion_point(field_mutable:config.Configuration.database_password)
  return _s;
}
inline const std::string& Configuration::_internal_database_password() const {
  return _impl_.database_password_.Get();
}
inline void Configuration::_internal_set_database_password(const std::string& value) {
  
  _impl_.database_password_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_database_password() {
  
  return _impl_.database_password_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_database_password() {
  // @@protoc_insertion_point(field_release:config.Configuration.database_password)
  return _impl_.database_password_.Release();
}
inline void Configuration::set_allocated_database_password(std::string* database_password) {
  if (database_password != nullptr) {
    
  } else {
    
  }
  _impl_.database_password_.SetAllocated(database_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.database_password_.IsDefault()) {
    _impl_.database_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.database_password)
}

// string log_file_path = 301;
inline void Configuration::clear_log_file_path() {
  _impl_.log_file_path_.ClearToEmpty();
}
inline const std::string& Configuration::log_file_path() const {
  // @@protoc_insertion_point(field_get:config.Configuration.log_file_path)
  return _internal_log_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_log_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Configuration.log_file_path)
}
inline std::string* Configuration::mutable_log_file_path() {
  std::string* _s = _internal_mutable_log_file_path();
  // @@protoc_insertion_point(field_mutable:config.Configuration.log_file_path)
  return _s;
}
inline const std::string& Configuration::_internal_log_file_path() const {
  return _impl_.log_file_path_.Get();
}
inline void Configuration::_internal_set_log_file_path(const std::string& value) {
  
  _impl_.log_file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_log_file_path() {
  
  return _impl_.log_file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* Configuration::release_log_file_path() {
  // @@protoc_insertion_point(field_release:config.Configuration.log_file_path)
  return _impl_.log_file_path_.Release();
}
inline void Configuration::set_allocated_log_file_path(std::string* log_file_path) {
  if (log_file_path != nullptr) {
    
  } else {
    
  }
  _impl_.log_file_path_.SetAllocated(log_file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_file_path_.IsDefault()) {
    _impl_.log_file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Configuration.log_file_path)
}

// uint32 system_page_size = 401;
inline void Configuration::clear_system_page_size() {
  _impl_.system_page_size_ = 0u;
}
inline uint32_t Configuration::_internal_system_page_size() const {
  return _impl_.system_page_size_;
}
inline uint32_t Configuration::system_page_size() const {
  // @@protoc_insertion_point(field_get:config.Configuration.system_page_size)
  return _internal_system_page_size();
}
inline void Configuration::_internal_set_system_page_size(uint32_t value) {
  
  _impl_.system_page_size_ = value;
}
inline void Configuration::set_system_page_size(uint32_t value) {
  _internal_set_system_page_size(value);
  // @@protoc_insertion_point(field_set:config.Configuration.system_page_size)
}

// uint32 system_alllocation_granularity = 402;
inline void Configuration::clear_system_alllocation_granularity() {
  _impl_.system_alllocation_granularity_ = 0u;
}
inline uint32_t Configuration::_internal_system_alllocation_granularity() const {
  return _impl_.system_alllocation_granularity_;
}
inline uint32_t Configuration::system_alllocation_granularity() const {
  // @@protoc_insertion_point(field_get:config.Configuration.system_alllocation_granularity)
  return _internal_system_alllocation_granularity();
}
inline void Configuration::_internal_set_system_alllocation_granularity(uint32_t value) {
  
  _impl_.system_alllocation_granularity_ = value;
}
inline void Configuration::set_system_alllocation_granularity(uint32_t value) {
  _internal_set_system_alllocation_granularity(value);
  // @@protoc_insertion_point(field_set:config.Configuration.system_alllocation_granularity)
}

// uint32 system_num_of_processors = 403;
inline void Configuration::clear_system_num_of_processors() {
  _impl_.system_num_of_processors_ = 0u;
}
inline uint32_t Configuration::_internal_system_num_of_processors() const {
  return _impl_.system_num_of_processors_;
}
inline uint32_t Configuration::system_num_of_processors() const {
  // @@protoc_insertion_point(field_get:config.Configuration.system_num_of_processors)
  return _internal_system_num_of_processors();
}
inline void Configuration::_internal_set_system_num_of_processors(uint32_t value) {
  
  _impl_.system_num_of_processors_ = value;
}
inline void Configuration::set_system_num_of_processors(uint32_t value) {
  _internal_set_system_num_of_processors(value);
  // @@protoc_insertion_point(field_set:config.Configuration.system_num_of_processors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
